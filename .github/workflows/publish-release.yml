name: publish-release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name"
        required: true

jobs:
  cpp-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file

      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: echo "Some files failed the linting checks!"

  build-project:
    runs-on: ${{ matrix.os }}
    needs: cpp-linter
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      #      for Ubuntu
      - name: Install sfml lib dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: sudo apt-get install libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev freeglut3-dev

      #      for MacOs
      - name: Install sfml lib dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install sfml

      #     for Windows
      - name: Install sfml lib dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install glfw3

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
          testPreset: 'test-release'

      - name: Run tests
        run: |
          cd builds/ninja-multi-vcpkg/server && ctest

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false

      - name: Archive Artifacts
        run: zip -r release.zip assets/ r-type_server r-type_client

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip